const findClosestValueInBst = require('./find-closest-value-in-bst')

class BST {
  constructor(value) {
    this.value = value
    this.left = null
    this.right = null
  }
}

test('Test case #1', () => {
  const root = new BST(10)
  root.left = new BST(5)
  root.left.left = new BST(2)
  root.left.left.left = new BST(1)
  root.left.right = new BST(5)
  root.right = new BST(15)
  root.right.left = new BST(13)
  root.right.left.right = new BST(14)
  root.right.right = new BST(22)
  const expected = 13
  const actual = findClosestValueInBst(root, 12)

  expect(actual).toEqual(expected)
})

test('Test case #2', () => {
  const root = new BST(100)
  root.left = new BST(5)
  root.left.left = new BST(2)
  root.left.left.left = new BST(1)
  root.left.left.left.left = new BST(-51)
  root.left.left.left.left.left = new BST(-403)
  root.left.left.left.right = new BST(1)
  root.left.left.left.right.right = new BST(1)
  root.left.left.left.right.right.right = new BST(1)
  root.left.left.left.right.right.right.right = new BST(1)
  root.left.left.left.right.right.right.right.right = new BST(1)
  root.left.left.right = new BST(5)
  root.left.right = new BST(15)
  root.left.right.left = new BST(5)
  root.left.right.left.left = new BST(-2)
  root.left.right.right = new BST(22)
  root.left.right.right.right = new BST(57)
  root.left.right.right.right.right = new BST(60)
  root.right = new BST(502)
  root.right.left = new BST(204)
  root.right.left.left = new BST(203)
  root.right.left.right = new BST(205)
  root.right.left.right.right = new BST(207)
  root.right.left.right.right.left = new BST(206)
  root.right.left.right.right.right = new BST(208)
  root.right.right = new BST(55000)
  root.right.right.left = new BST(1001)
  root.right.right.left.right = new BST(4500)
  const expected = 100
  const actual = findClosestValueInBst(root, 100)

  expect(actual).toEqual(expected)
})

test('Test case #3', () => {
  const root = new BST(100)
  root.left = new BST(5)
  root.left.left = new BST(2)
  root.left.left.left = new BST(1)
  root.left.left.left.left = new BST(-51)
  root.left.left.left.left.left = new BST(-403)
  root.left.left.left.right = new BST(1)
  root.left.left.left.right.right = new BST(1)
  root.left.left.left.right.right.right = new BST(1)
  root.left.left.left.right.right.right.right = new BST(1)
  root.left.left.right = new BST(3)
  root.left.left.right.right = new BST(3)
  root.left.left.right.right.right = new BST(3)
  root.left.right = new BST(15)
  root.left.right.left = new BST(5)
  root.left.right.left.left = new BST(5)
  root.left.right.left.right = new BST(22)
  root.left.right.left.right.right = new BST(57)
  root.left.right.left.right.right.right = new BST(60)
  root.left.right.right = new BST(5)
  root.right = new BST(502)
  root.right.left = new BST(204)
  root.right.left.left = new BST(203)
  root.right.left.right = new BST(205)
  root.right.left.right.right = new BST(207)
  root.right.left.right.right.left = new BST(206)
  root.right.left.right.right.right = new BST(208)
  root.right.right = new BST(55000)
  root.right.right.left = new BST(1001)
  root.right.right.left.right = new BST(4500)
  const expected = 208
  const actual = findClosestValueInBst(root, 208)

  expect(actual).toEqual(expected)
})

test('Test case #4', () => {
  const root = new BST(100)
  root.left = new BST(5)
  root.left.left = new BST(2)
  root.left.left.left = new BST(1)
  root.left.left.left.left = new BST(-51)
  root.left.left.left.left.left = new BST(-403)
  root.left.left.left.right = new BST(1)
  root.left.left.left.right.right = new BST(1)
  root.left.left.left.right.right.right = new BST(1)
  root.left.left.left.right.right.right.right = new BST(1)
  root.left.left.right = new BST(3)
  root.left.left.right.right = new BST(3)
  root.left.left.right.right.right = new BST(3)
  root.left.right = new BST(15)
  root.left.right.left = new BST(5)
  root.left.right.left.left = new BST(5)
  root.left.right.left.right = new BST(22)
  root.left.right.left.right.right = new BST(57)
  root.left.right.left.right.right.right = new BST(60)
  root.left.right.right = new BST(5)
  root.right = new BST(502)
  root.right.left = new BST(204)
  root.right.left.left = new BST(203)
  root.right.left.right = new BST(205)
  root.right.left.right.right = new BST(207)
  root.right.left.right.right.left = new BST(206)
  root.right.left.right.right.right = new BST(208)
  root.right.right = new BST(55000)
  root.right.right.left = new BST(1001)
  root.right.right.left.right = new BST(4500)
  const expected = 4500
  const actual = findClosestValueInBst(root, 4500)

  expect(actual).toEqual(expected)
})

test('Test case #5', () => {
  const root = new BST(100)
  root.left = new BST(5)
  root.left.left = new BST(2)
  root.left.left.left = new BST(1)
  root.left.left.left.left = new BST(-51)
  root.left.left.left.left.left = new BST(-403)
  root.left.left.left.right = new BST(1)
  root.left.left.left.right.right = new BST(1)
  root.left.left.left.right.right.right = new BST(1)
  root.left.left.left.right.right.right.right = new BST(1)
  root.left.left.right = new BST(3)
  root.left.left.right.right = new BST(3)
  root.left.left.right.right.right = new BST(3)
  root.left.right = new BST(15)
  root.left.right.left = new BST(5)
  root.left.right.left.left = new BST(5)
  root.left.right.left.right = new BST(22)
  root.left.right.left.right.right = new BST(57)
  root.left.right.left.right.right.right = new BST(60)
  root.left.right.right = new BST(5)
  root.right = new BST(502)
  root.right.left = new BST(204)
  root.right.left.left = new BST(203)
  root.right.left.right = new BST(205)
  root.right.left.right.right = new BST(207)
  root.right.left.right.right.left = new BST(206)
  root.right.left.right.right.right = new BST(208)
  root.right.right = new BST(55000)
  root.right.right.left = new BST(1001)
  root.right.right.left.right = new BST(4500)
  const expected = 4500
  const actual = findClosestValueInBst(root, 4501)

  expect(actual).toEqual(expected)
})

test('Test case #6', () => {
  const root = new BST(100)
  root.left = new BST(5)
  root.left.left = new BST(2)
  root.left.left.left = new BST(1)
  root.left.left.left.left = new BST(-51)
  root.left.left.left.left.left = new BST(-403)
  root.left.left.left.right = new BST(1)
  root.left.left.left.right.right = new BST(1)
  root.left.left.left.right.right.right = new BST(1)
  root.left.left.left.right.right.right.right = new BST(1)
  root.left.left.right = new BST(3)
  root.left.left.right.right = new BST(3)
  root.left.left.right.right.right = new BST(3)
  root.left.right = new BST(15)
  root.left.right.left = new BST(5)
  root.left.right.left.left = new BST(5)
  root.left.right.left.right = new BST(22)
  root.left.right.left.right.right = new BST(57)
  root.left.right.left.right.right.right = new BST(60)
  root.left.right.right = new BST(5)
  root.right = new BST(502)
  root.right.left = new BST(204)
  root.right.left.left = new BST(203)
  root.right.left.right = new BST(205)
  root.right.left.right.right = new BST(207)
  root.right.left.right.right.left = new BST(206)
  root.right.left.right.right.right = new BST(208)
  root.right.right = new BST(55000)
  root.right.right.left = new BST(1001)
  root.right.right.left.right = new BST(4500)
  const expected = -51
  const actual = findClosestValueInBst(root, -70)

  expect(actual).toEqual(expected)
})

test('Test case #7', () => {
  const root = new BST(100)
  root.left = new BST(5)
  root.left.left = new BST(2)
  root.left.left.left = new BST(1)
  root.left.left.left.left = new BST(-51)
  root.left.left.left.left.left = new BST(-403)
  root.left.left.left.right = new BST(1)
  root.left.left.left.right.right = new BST(1)
  root.left.left.left.right.right.right = new BST(1)
  root.left.left.left.right.right.right.right = new BST(1)
  root.left.left.right = new BST(3)
  root.left.left.right.right = new BST(3)
  root.left.left.right.right.right = new BST(3)
  root.left.right = new BST(15)
  root.left.right.left = new BST(5)
  root.left.right.left.left = new BST(5)
  root.left.right.left.right = new BST(22)
  root.left.right.left.right.right = new BST(57)
  root.left.right.left.right.right.right = new BST(60)
  root.left.right.right = new BST(5)
  root.right = new BST(502)
  root.right.left = new BST(204)
  root.right.left.left = new BST(203)
  root.right.left.right = new BST(205)
  root.right.left.right.right = new BST(207)
  root.right.left.right.right.left = new BST(206)
  root.right.left.right.right.right = new BST(208)
  root.right.right = new BST(55000)
  root.right.right.left = new BST(1001)
  root.right.right.left.right = new BST(4500)
  const expected = 1001
  const actual = findClosestValueInBst(root, 2000)

  expect(actual).toEqual(expected)
})

test('Test case #8', () => {
  const root = new BST(100)
  root.left = new BST(5)
  root.left.left = new BST(2)
  root.left.left.left = new BST(1)
  root.left.left.left.left = new BST(-51)
  root.left.left.left.left.left = new BST(-403)
  root.left.left.left.right = new BST(1)
  root.left.left.left.right.right = new BST(1)
  root.left.left.left.right.right.right = new BST(1)
  root.left.left.left.right.right.right.right = new BST(1)
  root.left.left.right = new BST(3)
  root.left.left.right.right = new BST(3)
  root.left.left.right.right.right = new BST(3)
  root.left.right = new BST(15)
  root.left.right.left = new BST(5)
  root.left.right.left.left = new BST(5)
  root.left.right.left.right = new BST(22)
  root.left.right.left.right.right = new BST(57)
  root.left.right.left.right.right.right = new BST(60)
  root.left.right.right = new BST(5)
  root.right = new BST(502)
  root.right.left = new BST(204)
  root.right.left.left = new BST(203)
  root.right.left.right = new BST(205)
  root.right.left.right.right = new BST(207)
  root.right.left.right.right.left = new BST(206)
  root.right.left.right.right.right = new BST(208)
  root.right.right = new BST(55000)
  root.right.right.left = new BST(1001)
  root.right.right.left.right = new BST(4500)
  const expected = 5
  const actual = findClosestValueInBst(root, 6)

  expect(actual).toEqual(expected)
})

test('Test case #9', () => {
  const root = new BST(100)
  root.left = new BST(5)
  root.left.left = new BST(2)
  root.left.left.left = new BST(1)
  root.left.left.left.left = new BST(-51)
  root.left.left.left.left.left = new BST(-403)
  root.left.left.left.right = new BST(1)
  root.left.left.left.right.right = new BST(1)
  root.left.left.left.right.right.right = new BST(1)
  root.left.left.left.right.right.right.right = new BST(1)
  root.left.left.right = new BST(3)
  root.left.left.right.right = new BST(3)
  root.left.left.right.right.right = new BST(3)
  root.left.right = new BST(15)
  root.left.right.left = new BST(5)
  root.left.right.left.left = new BST(5)
  root.left.right.left.right = new BST(22)
  root.left.right.left.right.right = new BST(57)
  root.left.right.left.right.right.right = new BST(60)
  root.left.right.right = new BST(5)
  root.right = new BST(502)
  root.right.left = new BST(204)
  root.right.left.left = new BST(203)
  root.right.left.right = new BST(205)
  root.right.left.right.right = new BST(207)
  root.right.left.right.right.left = new BST(206)
  root.right.left.right.right.right = new BST(208)
  root.right.right = new BST(55000)
  root.right.right.left = new BST(1001)
  root.right.right.left.right = new BST(4500)
  const expected = 55000
  const actual = findClosestValueInBst(root, 30000)

  expect(actual).toEqual(expected)
})

test('Test case #10', () => {
  const root = new BST(100)
  root.left = new BST(5)
  root.left.left = new BST(2)
  root.left.left.left = new BST(1)
  root.left.left.left.left = new BST(-51)
  root.left.left.left.left.left = new BST(-403)
  root.left.left.left.right = new BST(1)
  root.left.left.left.right.right = new BST(1)
  root.left.left.left.right.right.right = new BST(1)
  root.left.left.left.right.right.right.right = new BST(1)
  root.left.left.left.right.right.right.right.right = new BST(1)
  root.left.left.right = new BST(3)
  root.left.left.right.right = new BST(3)
  root.left.left.right.right.right = new BST(3)
  root.left.right = new BST(15)
  root.left.right.left = new BST(5)
  root.left.right.left.left = new BST(-2)
  root.left.right.right = new BST(22)
  root.left.right.right.right = new BST(57)
  root.left.right.right.right.right = new BST(60)
  root.right = new BST(502)
  root.right.left = new BST(204)
  root.right.left.left = new BST(203)
  root.right.left.right = new BST(205)
  root.right.left.right.right = new BST(207)
  root.right.left.right.right.left = new BST(206)
  root.right.left.right.right.right = new BST(208)
  root.right.right = new BST(55000)
  root.right.right.left = new BST(1001)
  root.right.right.left.right = new BST(4500)
  const expected = 1
  const actual = findClosestValueInBst(root, -1)

  expect(actual).toEqual(expected)
})

test('Test case #11', () => {
  const root = new BST(100)
  root.left = new BST(5)
  root.left.left = new BST(2)
  root.left.left.left = new BST(1)
  root.left.left.left.left = new BST(-51)
  root.left.left.left.left.left = new BST(-403)
  root.left.left.left.right = new BST(1)
  root.left.left.left.right.right = new BST(1)
  root.left.left.left.right.right.right = new BST(1)
  root.left.left.left.right.right.right.right = new BST(1)
  root.left.left.right = new BST(3)
  root.left.left.right.right = new BST(3)
  root.left.left.right.right.right = new BST(3)
  root.left.right = new BST(15)
  root.left.right.left = new BST(5)
  root.left.right.left.left = new BST(5)
  root.left.right.left.right = new BST(22)
  root.left.right.left.right.right = new BST(57)
  root.left.right.left.right.right.right = new BST(60)
  root.left.right.right = new BST(5)
  root.right = new BST(502)
  root.right.left = new BST(204)
  root.right.left.left = new BST(203)
  root.right.left.right = new BST(205)
  root.right.left.right.right = new BST(207)
  root.right.left.right.right.left = new BST(206)
  root.right.left.right.right.right = new BST(208)
  root.right.right = new BST(55000)
  root.right.right.left = new BST(1001)
  root.right.right.left.right = new BST(4500)
  const expected = 55000
  const actual = findClosestValueInBst(root, 29751)

  expect(actual).toEqual(expected)
})

test('Test case #12', () => {
  const root = new BST(100)
  root.left = new BST(5)
  root.left.left = new BST(2)
  root.left.left.left = new BST(1)
  root.left.left.left.left = new BST(-51)
  root.left.left.left.left.left = new BST(-403)
  root.left.left.left.right = new BST(1)
  root.left.left.left.right.right = new BST(1)
  root.left.left.left.right.right.right = new BST(1)
  root.left.left.left.right.right.right.right = new BST(1)
  root.left.left.right = new BST(3)
  root.left.left.right.right = new BST(3)
  root.left.left.right.right.right = new BST(3)
  root.left.right = new BST(15)
  root.left.right.left = new BST(5)
  root.left.right.left.left = new BST(5)
  root.left.right.left.right = new BST(22)
  root.left.right.left.right.right = new BST(57)
  root.left.right.left.right.right.right = new BST(60)
  root.left.right.right = new BST(5)
  root.right = new BST(502)
  root.right.left = new BST(204)
  root.right.left.left = new BST(203)
  root.right.left.right = new BST(205)
  root.right.left.right.right = new BST(207)
  root.right.left.right.right.left = new BST(206)
  root.right.left.right.right.right = new BST(208)
  root.right.right = new BST(55000)
  root.right.right.left = new BST(1001)
  root.right.right.left.right = new BST(4500)
  const expected = 4500
  const actual = findClosestValueInBst(root, 29749)

  expect(actual).toEqual(expected)
})
